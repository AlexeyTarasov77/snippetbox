// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "snippetbox.proj.net/internal/storage/models"
)

// SnippetsStorage is an autogenerated mock type for the SnippetsStorage type
type SnippetsStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *SnippetsStorage) Get(id int) (*models.Snippet, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Snippet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Snippet, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Snippet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *SnippetsStorage) GetByUserID(userID int) ([]*models.Snippet, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*models.Snippet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*models.Snippet, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []*models.Snippet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: title, content, expires, userID
func (_m *SnippetsStorage) Insert(title string, content string, expires int, userID int) (int64, error) {
	ret := _m.Called(title, content, expires, userID)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) (int64, error)); ok {
		return rf(title, content, expires, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) int64); ok {
		r0 = rf(title, content, expires, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(title, content, expires, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Latest provides a mock function with given fields: n
func (_m *SnippetsStorage) Latest(n int) ([]*models.Snippet, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Latest")
	}

	var r0 []*models.Snippet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*models.Snippet, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []*models.Snippet); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Snippet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSnippetsStorage creates a new instance of SnippetsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnippetsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnippetsStorage {
	mock := &SnippetsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
